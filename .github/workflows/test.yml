name: Core Library Tests
on:
  push:
    branches: [main, develop, refactor/*]
  pull_request:
    branches: [main]

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Verify installation
        run: |
          python -c "import its_compiler; print(f'ITS Compiler version: {its_compiler.__version__}')"
      - name: Run all tests with coverage
        run: |
          python test_runner.py --verbose --category all
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            .coverage
        id: upload-results
        continue-on-error: true
      - name: Retry upload test results on failure
        uses: actions/upload-artifact@v4
        if: always() && steps.upload-results.outcome == 'failure'
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            .coverage

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run linting
        run: |
          python test_runner.py --lint

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run security scan
        run: |
          python test_runner.py --security-scan
      - name: Run bandit security scan
        run: |
          bandit -r its_compiler/ -f json -o bandit-results.json || true
          bandit -r its_compiler/ || true
      - name: Run pip-audit security scan
        run: |
          pip-audit --format=json --output=pip-audit-results.json || true
          pip-audit || true
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            pip-audit-results.json

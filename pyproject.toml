[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "its-compiler-python"
version = "0.1.1"
description = "Reference Python compiler for Instruction Template Specification (ITS) with comprehensive security features"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Alexander Parker", email = "your-email@example.com" }]
maintainers = [{ name = "Alexander Parker", email = "your-email@example.com" }]
keywords = [
    "its",
    "instruction",
    "template",
    "specification",
    "ai",
    "prompt",
    "compilation",
    "nlp",
    "content-generation",
    "security",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Markup",
    "Topic :: Security",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "requests>=2.28.0",
    "jsonschema>=4.17.0",
    "watchdog>=3.0.0",
    "pydantic>=1.10.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",

    # Code quality (streamlined)
    "black>=22.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-bugbear>=23.0.0",
    "pep8-naming>=0.13.0",
    "mypy>=1.0.0",

    # Security
    "bandit[toml]>=1.7.0",

    # Development tools
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]

security = [
    # Additional security libraries for enhanced protection
    "cryptography>=38.0.0",
    "pyotp>=2.8.0",
    "passlib>=1.7.0",
    "bcrypt>=4.0.0",
]

monitoring = [
    # Monitoring and observability
    "prometheus-client>=0.15.0",
    "structlog>=22.0.0",
    "sentry-sdk>=1.15.0",
]

all = ["its-compiler-python[dev,security,monitoring]"]

[project.urls]
Homepage = "https://github.com/alexanderparker/its-compiler-python"
Documentation = "https://its-compiler-python.readthedocs.io/"
Repository = "https://github.com/alexanderparker/its-compiler-python.git"
Changelog = "https://github.com/alexanderparker/its-compiler-python/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/alexanderparker/its-compiler-python/issues"
"Security Policy" = "https://github.com/alexanderparker/its-compiler-python/security/policy"

[project.scripts]
its-compile = "its_compiler.cli:main"

[tool.setuptools]
package-dir = { "" = "." }

[tool.setuptools.packages.find]
include = ["its_compiler*"]
exclude = ["test*", "docs*", "examples*"]

[tool.setuptools.package-data]
its_compiler = ["config/*.json", "security/*.json", "py.typed"]

# Testing Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=its_compiler",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--timeout=30",
]
testpaths = ["test"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "security: marks tests as security-focused",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]

# Security Configuration
[tool.bandit]
exclude_dirs = ["test", "docs"]
skips = ["B101", "B601"]

# Code Quality Configuration
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["its_compiler", "test"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["rich.*", "watchdog.*", "requests.*"]
ignore_missing_imports = true

# Streamlined flake8 config
[tool.flake8]
max-line-length = 120
extend-ignore = [
    "E203", # Whitespace before ':' (conflicts with black)
    "W503", # Line break before binary operator (conflicts with black)
    "E501", # Line too long (handled by black)
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D200", # One-line docstring should fit on one line
    "D202", # No blank lines allowed after function docstring
    "D205", # 1 blank line required between summary line and description
    "D212", # Multi-line docstring summary should start at the first line
    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood
    "D415", # First line should end with a period, question mark, or exclamation point
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    "test/templates/invalid/",
    "test/templates/security/",
]
per-file-ignores = [
    "__init__.py:F401", # Allow unused imports in __init__ files
]

# Coverage Configuration
[tool.coverage.run]
source = ["its_compiler"]
omit = [
    "*/test*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/dist-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

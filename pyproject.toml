[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "its-compiler"
version = "1.0.3"
description = "Reference Python library for Instruction Template Specification (ITS) with comprehensive security features"
readme = { file = "README.md", content-type = "text/markdown" }
license = "MIT"
authors = [{ name = "Alexander Parker", email = "pypi@parker.im" }]
maintainers = [{ name = "Alexander Parker", email = "pypi@parker.im" }]
keywords = [
    "its",
    "instruction",
    "template",
    "specification",
    "ai",
    "prompt",
    "compilation",
    "nlp",
    "content-generation",
    "security",
    "library",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Markup",
    "Topic :: Security",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = []

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-timeout>=2.4.0",

    # Code quality
    "black>=25.0.0",
    "isort>=6.0.1",
    "flake8>=7.3.0",
    "flake8-bugbear>=24.12.12",
    "flake8-pyproject>=1.2.3",
    "pep8-naming>=0.15.1",
    "mypy >=1.17.0",

    # Security
    "bandit>=1.8.3",
    "pip-audit>=2.9.0",

    # Development tools
    "pre-commit>=4.2.0",
]

security = []

monitoring = []

all = ["its-compiler-python[dev,security,monitoring]"]

[project.urls]
Homepage = "https://github.com/AlexanderParker/its-compiler-python"
Documentation = "https://github.com/AlexanderParker/its-compiler-python"
Repository = "https://github.com/AlexanderParker/its-compiler-python.git"
Changelog = "https://github.com/AlexanderParker/its-compiler-python/commits/main/"
"Bug Tracker" = "https://github.com/AlexanderParker/its-compiler-python/issues"

[tool.setuptools]
package-dir = { "" = "." }

[tool.setuptools.packages.find]
include = ["its_compiler*"]
exclude = ["test*", "docs*", "examples*", "its_compiler.cli*"]

[tool.setuptools.package-data]
its_compiler = ["config/*.json", "security/*.json", "py.typed"]

# Testing Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=its_compiler",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--timeout=30",
]
testpaths = ["test"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "security: marks tests as security-focused",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]

# Security Configuration
[tool.bandit]
exclude_dirs = ["test", "docs"]
skips = ["B101", "B601"]

# Code Quality Configuration
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["its_compiler", "test"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "venv/",
    "venv\\\\",
    ".venv/",
    ".venv\\\\",
    "env/",
    "env\\\\",
    ".env/",
    ".env\\\\",
    "build/",
]

# Streamlined flake8 config
[tool.flake8]
max-line-length = 120
extend-ignore = [
    "E203", # Whitespace before ':' (conflicts with black)
    "W503", # Line break before binary operator (conflicts with black)
    "E501", # Line too long (handled by black)
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D202",
    "D205",
    "D212",
    "D400",
    "D401",
    "D415",
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    "test/templates/invalid/",
    "test/templates/security/",
]
per-file-ignores = ["__init__.py:F401"]

# Coverage Configuration
[tool.coverage.run]
source = ["its_compiler"]
omit = [
    "*/test*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/dist-packages/*",
    "*/its_compiler/cli/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
